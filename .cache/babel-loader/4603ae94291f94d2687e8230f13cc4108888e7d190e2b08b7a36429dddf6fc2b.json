{"ast":null,"code":"\"use strict\";\n\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst utils_1 = require(\"../../utils\");\nconst beforeOffsetOf_1 = require(\"../../raw/beforeOffsetOf\");\nconst MISSING_VALUES = 'beforeOffsetOf:make sure to define offset unit and key';\nconst INVALID_AFTER_KEY = 'beforeOffsetOf:2nd argument must be a valid calc key';\nconst INVALID_AFTER_UNIT = 'beforeOffsetOf:1st argument must be a number';\n/**\n * Enforces the field value to be before a given time period offset.\n *\n * The `period` value has to be one of the following\n *\n * - years\n * - quarters\n * - months\n * - weeks\n * - days\n * - hours\n * - minutes\n * - seconds\n * - milliseconds\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   meetup: 'date|before_offset_of:4,months'\n * }\n *\n * // or\n * const rules = {\n *   meetup: [\n *     validations.date(),\n *     validations.beforeOffsetOf([4, 'months'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n  async: false,\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n    const diffUnit = indicative_utils_1.cast(args[0], 'integer', INVALID_AFTER_UNIT);\n    const key = args[1];\n    if (!utils_1.dateOffsetKeys.includes(key)) {\n      throw new Error(INVALID_AFTER_KEY);\n    }\n    return [Number(diffUnit), key];\n  },\n  validate: (data, field, _ref, config) => {\n    let [diffUnit, key] = _ref;\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n    if (!fieldValue) {\n      return false;\n    }\n    return beforeOffsetOf_1.beforeOffsetOf(fieldValue, diffUnit, key);\n  }\n};\nexports.default = validation;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_utils_1","require","utils_1","beforeOffsetOf_1","MISSING_VALUES","INVALID_AFTER_KEY","INVALID_AFTER_UNIT","validation","async","compile","args","ensureLength","diffUnit","cast","key","dateOffsetKeys","includes","Error","Number","validate","data","field","_ref","config","fieldValue","getValue","skippable","beforeOffsetOf","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/validations/date-string/beforeOffsetOf.js"],"sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst utils_1 = require(\"../../utils\");\nconst beforeOffsetOf_1 = require(\"../../raw/beforeOffsetOf\");\nconst MISSING_VALUES = 'beforeOffsetOf:make sure to define offset unit and key';\nconst INVALID_AFTER_KEY = 'beforeOffsetOf:2nd argument must be a valid calc key';\nconst INVALID_AFTER_UNIT = 'beforeOffsetOf:1st argument must be a number';\n/**\n * Enforces the field value to be before a given time period offset.\n *\n * The `period` value has to be one of the following\n *\n * - years\n * - quarters\n * - months\n * - weeks\n * - days\n * - hours\n * - minutes\n * - seconds\n * - milliseconds\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   meetup: 'date|before_offset_of:4,months'\n * }\n *\n * // or\n * const rules = {\n *   meetup: [\n *     validations.date(),\n *     validations.beforeOffsetOf([4, 'months'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n        const diffUnit = indicative_utils_1.cast(args[0], 'integer', INVALID_AFTER_UNIT);\n        const key = args[1];\n        if (!utils_1.dateOffsetKeys.includes(key)) {\n            throw new Error(INVALID_AFTER_KEY);\n        }\n        return [Number(diffUnit), key];\n    },\n    validate: (data, field, [diffUnit, key], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        if (!fieldValue) {\n            return false;\n        }\n        return beforeOffsetOf_1.beforeOffsetOf(fieldValue, diffUnit, key);\n    },\n};\nexports.default = validation;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD,MAAMC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;AACtC,MAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAMG,cAAc,GAAG,wDAAwD;AAC/E,MAAMC,iBAAiB,GAAG,sDAAsD;AAChF,MAAMC,kBAAkB,GAAG,8CAA8C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG;EACfC,KAAK,EAAE,KAAK;EACZC,OAAOA,CAACC,IAAI,EAAE;IACVV,kBAAkB,CAACW,YAAY,CAACD,IAAI,EAAEN,cAAc,EAAE,CAAC,CAAC;IACxD,MAAMQ,QAAQ,GAAGZ,kBAAkB,CAACa,IAAI,CAACH,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,EAAEJ,kBAAkB,CAAC;IAChF,MAAMQ,GAAG,GAAGJ,IAAI,CAAC,CAAC,CAAC;IACnB,IAAI,CAACR,OAAO,CAACa,cAAc,CAACC,QAAQ,CAACF,GAAG,CAAC,EAAE;MACvC,MAAM,IAAIG,KAAK,CAACZ,iBAAiB,CAAC;IACtC;IACA,OAAO,CAACa,MAAM,CAACN,QAAQ,CAAC,EAAEE,GAAG,CAAC;EAClC,CAAC;EACDK,QAAQ,EAAEA,CAACC,IAAI,EAAEC,KAAK,EAAAC,IAAA,EAAmBC,MAAM,KAAK;IAAA,IAA5B,CAACX,QAAQ,EAAEE,GAAG,CAAC,GAAAQ,IAAA;IACnC,MAAME,UAAU,GAAGxB,kBAAkB,CAACyB,QAAQ,CAACL,IAAI,EAAEC,KAAK,CAAC;IAC3D,IAAIrB,kBAAkB,CAAC0B,SAAS,CAACF,UAAU,EAAEH,KAAK,EAAEE,MAAM,CAAC,EAAE;MACzD,OAAO,IAAI;IACf;IACA,IAAI,CAACC,UAAU,EAAE;MACb,OAAO,KAAK;IAChB;IACA,OAAOrB,gBAAgB,CAACwB,cAAc,CAACH,UAAU,EAAEZ,QAAQ,EAAEE,GAAG,CAAC;EACrE;AACJ,CAAC;AACDhB,OAAO,CAAC8B,OAAO,GAAGrB,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}