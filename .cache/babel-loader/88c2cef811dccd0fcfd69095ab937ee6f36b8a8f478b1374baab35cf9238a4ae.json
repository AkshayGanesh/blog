{"ast":null,"code":"\"use strict\";\n\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst MISSING_VALUE = 'equals:make sure to define the comparison string';\n/**\n * Enforces the field value to be loosely equal to the given value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   coupon: 'equals:5050'\n * }\n *\n * // or\n * const rules = {\n *   coupon: [\n *     validations.equals([5050])\n *   ]\n * }\n * ```\n */\nconst validation = {\n  async: false,\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    return [args[0]];\n  },\n  validate: (data, field, _ref, config) => {\n    let [comparisonValue] = _ref;\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    /* eslint eqeqeq: \"off\" */\n    return indicative_utils_1.skippable(fieldValue, field, config) || comparisonValue == fieldValue;\n  }\n};\nexports.default = validation;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_utils_1","require","MISSING_VALUE","validation","async","compile","args","ensureLength","validate","data","field","_ref","config","comparisonValue","fieldValue","getValue","skippable","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/validations/primitives/equals.js"],"sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst MISSING_VALUE = 'equals:make sure to define the comparison string';\n/**\n * Enforces the field value to be loosely equal to the given value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   coupon: 'equals:5050'\n * }\n *\n * // or\n * const rules = {\n *   coupon: [\n *     validations.equals([5050])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        return [args[0]];\n    },\n    validate: (data, field, [comparisonValue], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        /* eslint eqeqeq: \"off\" */\n        return indicative_utils_1.skippable(fieldValue, field, config) || comparisonValue == fieldValue;\n    },\n};\nexports.default = validation;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD,MAAMC,aAAa,GAAG,kDAAkD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG;EACfC,KAAK,EAAE,KAAK;EACZC,OAAOA,CAACC,IAAI,EAAE;IACVN,kBAAkB,CAACO,YAAY,CAACD,IAAI,EAAEJ,aAAa,EAAE,CAAC,CAAC;IACvD,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC;EACDE,QAAQ,EAAEA,CAACC,IAAI,EAAEC,KAAK,EAAAC,IAAA,EAAqBC,MAAM,KAAK;IAAA,IAA9B,CAACC,eAAe,CAAC,GAAAF,IAAA;IACrC,MAAMG,UAAU,GAAGd,kBAAkB,CAACe,QAAQ,CAACN,IAAI,EAAEC,KAAK,CAAC;IAC3D;IACA,OAAOV,kBAAkB,CAACgB,SAAS,CAACF,UAAU,EAAEJ,KAAK,EAAEE,MAAM,CAAC,IAAIC,eAAe,IAAIC,UAAU;EACnG;AACJ,CAAC;AACDhB,OAAO,CAACmB,OAAO,GAAGd,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}