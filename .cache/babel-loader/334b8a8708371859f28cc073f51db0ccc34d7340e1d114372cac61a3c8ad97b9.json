{"ast":null,"code":"\"use strict\";\n\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Enforces the field value to be a valid string.\n *\n * [note]\n *   The values transfered over HTTP are alawys string, which means this\n *   validation will always pass.\n *\n *   However, this validation rule is helpful for raw JSON requests, since\n *   after parsing the JSON strings, the server will get the actual content\n *   types and not a string.\n *\n *   In short, the rule has no impact for `application/x-www-form-urlencoded`, but\n *   helpful for `application/json` content type.\n * [/note]\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   bio: 'string'\n * }\n *\n * // or\n * const rules = {\n *   bio: [\n *     validations.string()\n *   ]\n * }\n * ```\n */\nconst validation = {\n  async: false,\n  validate: (data, field, _args, config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n    return typeof fieldValue === 'string';\n  }\n};\nexports.default = validation;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_utils_1","require","validation","async","validate","data","field","_args","config","fieldValue","getValue","skippable","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/validations/string/string.js"],"sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Enforces the field value to be a valid string.\n *\n * [note]\n *   The values transfered over HTTP are alawys string, which means this\n *   validation will always pass.\n *\n *   However, this validation rule is helpful for raw JSON requests, since\n *   after parsing the JSON strings, the server will get the actual content\n *   types and not a string.\n *\n *   In short, the rule has no impact for `application/x-www-form-urlencoded`, but\n *   helpful for `application/json` content type.\n * [/note]\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   bio: 'string'\n * }\n *\n * // or\n * const rules = {\n *   bio: [\n *     validations.string()\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    validate: (data, field, _args, config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        return typeof (fieldValue) === 'string';\n    },\n};\nexports.default = validation;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG;EACfC,KAAK,EAAE,KAAK;EACZC,QAAQ,EAAEA,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,KAAK;IACtC,MAAMC,UAAU,GAAGT,kBAAkB,CAACU,QAAQ,CAACL,IAAI,EAAEC,KAAK,CAAC;IAC3D,IAAIN,kBAAkB,CAACW,SAAS,CAACF,UAAU,EAAEH,KAAK,EAAEE,MAAM,CAAC,EAAE;MACzD,OAAO,IAAI;IACf;IACA,OAAO,OAAQC,UAAW,KAAK,QAAQ;EAC3C;AACJ,CAAC;AACDX,OAAO,CAACc,OAAO,GAAGV,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}