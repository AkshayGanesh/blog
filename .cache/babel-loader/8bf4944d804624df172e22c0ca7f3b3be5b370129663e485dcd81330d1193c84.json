{"ast":null,"code":"\"use strict\";\n\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Converts the field value to lower case. Also, this sanitization rule\n * is locale aware.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   hexCode: 'lower_case'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   hexCode: [\n *     sanitizations.lowerCase()\n *   ]\n * }\n * ```\n *\n * You may also specify a locale.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   label: 'lower_case:fr-CA'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   label: [\n *     sanitizations.lowerCase(['fr-CA'])\n *   ]\n * }\n * ```\n */\nconst lowerCase = {\n  sanitize(data, field) {\n    let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let fieldValue = indicative_utils_1.getValue(data, field);\n    if (typeof fieldValue !== 'string') {\n      return;\n    }\n    indicative_utils_1.patchValue(data, field, fieldValue.toLocaleLowerCase(args[0]));\n  }\n};\nexports.default = lowerCase;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_utils_1","require","lowerCase","sanitize","data","field","args","arguments","length","undefined","fieldValue","getValue","patchValue","toLocaleLowerCase","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/sanitizations/lowerCase.js"],"sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Converts the field value to lower case. Also, this sanitization rule\n * is locale aware.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   hexCode: 'lower_case'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   hexCode: [\n *     sanitizations.lowerCase()\n *   ]\n * }\n * ```\n *\n * You may also specify a locale.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   label: 'lower_case:fr-CA'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   label: [\n *     sanitizations.lowerCase(['fr-CA'])\n *   ]\n * }\n * ```\n */\nconst lowerCase = {\n    sanitize(data, field, args = []) {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (typeof (fieldValue) !== 'string') {\n            return;\n        }\n        indicative_utils_1.patchValue(data, field, fieldValue.toLocaleLowerCase(args[0]));\n    },\n};\nexports.default = lowerCase;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG;EACdC,QAAQA,CAACC,IAAI,EAAEC,KAAK,EAAa;IAAA,IAAXC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAC3B,IAAIG,UAAU,GAAGV,kBAAkB,CAACW,QAAQ,CAACP,IAAI,EAAEC,KAAK,CAAC;IACzD,IAAI,OAAQK,UAAW,KAAK,QAAQ,EAAE;MAClC;IACJ;IACAV,kBAAkB,CAACY,UAAU,CAACR,IAAI,EAAEC,KAAK,EAAEK,UAAU,CAACG,iBAAiB,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACrF;AACJ,CAAC;AACDR,OAAO,CAACgB,OAAO,GAAGZ,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}