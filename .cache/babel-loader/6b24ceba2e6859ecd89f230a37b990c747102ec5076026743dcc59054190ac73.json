{"ast":null,"code":"\"use strict\";\n\n/**\n * @module compiler/validator\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * indicative-compiler\n *\n * (c) Harminder Virk <virk@adonisjs.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst pope_1 = require(\"pope\");\nconst lodash_set_1 = __importDefault(require(\"lodash.set\"));\n/**\n * Collector collects all the errors and creates a copy of validated\n * data (only when `generateTree = true`).\n */\nclass Collector {\n  constructor(formatter, generateTree, customErrorCollector) {\n    this.formatter = formatter;\n    this.generateTree = generateTree;\n    this.customErrorCollector = customErrorCollector;\n    this.tree = {};\n    this.hasErrors = false;\n  }\n  /**\n   * Set value of a given node. The function results in a noop\n   * when `value === undefined` or the validation chain has\n   * one or more errors.\n   */\n  setValue(pointer, value) {\n    if (!this.generateTree || value === undefined || this.hasErrors) {\n      return;\n    }\n    pointer = pointer.replace('.::tip::', '');\n    lodash_set_1.default(this.tree, pointer, value);\n  }\n  /**\n   * Returns the collected data\n   */\n  getData() {\n    return this.tree;\n  }\n  /**\n   * Returns errors from the formatter\n   */\n  getErrors() {\n    return this.formatter.toJSON();\n  }\n  /**\n   * Passes error to the error formatter for a given field and rule.\n   * Also when the message is undefined, it will create a generic\n   * message.\n   */\n  setError(pointer, rule, message) {\n    this.hasErrors = true;\n    if (message && typeof message === 'string') {\n      message = pope_1.pope(message, {\n        field: pointer,\n        args: rule.args,\n        validation: rule.name\n      });\n    }\n    message = message || `${rule.name} validation failed on ${pointer}`;\n    message = typeof message === 'function' ? message(pointer, rule.name, rule.args) : message;\n    /**\n     * When custom error collector is defined, then we let it handle then\n     * error, otherwise we report it to the formatter ourselves\n     */\n    if (typeof this.customErrorCollector === 'function') {\n      this.customErrorCollector(this.formatter, message, pointer, rule.name, rule.args);\n    } else {\n      /**\n       * Report error to the formatter\n       */\n      this.formatter.addError(message, pointer, rule.name, rule.args);\n    }\n  }\n}\nexports.Collector = Collector;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","pope_1","require","lodash_set_1","Collector","constructor","formatter","generateTree","customErrorCollector","tree","hasErrors","setValue","pointer","undefined","replace","default","getData","getErrors","toJSON","setError","rule","message","pope","field","args","validation","name","addError"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-compiler/build/src/Validator/Collector.js"],"sourcesContent":["\"use strict\";\n/**\n * @module compiler/validator\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * indicative-compiler\n *\n * (c) Harminder Virk <virk@adonisjs.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst pope_1 = require(\"pope\");\nconst lodash_set_1 = __importDefault(require(\"lodash.set\"));\n/**\n * Collector collects all the errors and creates a copy of validated\n * data (only when `generateTree = true`).\n */\nclass Collector {\n    constructor(formatter, generateTree, customErrorCollector) {\n        this.formatter = formatter;\n        this.generateTree = generateTree;\n        this.customErrorCollector = customErrorCollector;\n        this.tree = {};\n        this.hasErrors = false;\n    }\n    /**\n     * Set value of a given node. The function results in a noop\n     * when `value === undefined` or the validation chain has\n     * one or more errors.\n     */\n    setValue(pointer, value) {\n        if (!this.generateTree || value === undefined || this.hasErrors) {\n            return;\n        }\n        pointer = pointer.replace('.::tip::', '');\n        lodash_set_1.default(this.tree, pointer, value);\n    }\n    /**\n     * Returns the collected data\n     */\n    getData() {\n        return this.tree;\n    }\n    /**\n     * Returns errors from the formatter\n     */\n    getErrors() {\n        return this.formatter.toJSON();\n    }\n    /**\n     * Passes error to the error formatter for a given field and rule.\n     * Also when the message is undefined, it will create a generic\n     * message.\n     */\n    setError(pointer, rule, message) {\n        this.hasErrors = true;\n        if (message && typeof (message) === 'string') {\n            message = pope_1.pope(message, {\n                field: pointer,\n                args: rule.args,\n                validation: rule.name,\n            });\n        }\n        message = message || `${rule.name} validation failed on ${pointer}`;\n        message = typeof (message) === 'function' ? message(pointer, rule.name, rule.args) : message;\n        /**\n         * When custom error collector is defined, then we let it handle then\n         * error, otherwise we report it to the formatter ourselves\n         */\n        if (typeof (this.customErrorCollector) === 'function') {\n            this.customErrorCollector(this.formatter, message, pointer, rule.name, rule.args);\n        }\n        else {\n            /**\n             * Report error to the formatter\n             */\n            this.formatter.addError(message, pointer, rule.name, rule.args);\n        }\n    }\n}\nexports.Collector = Collector;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMC,YAAY,GAAGT,eAAe,CAACQ,OAAO,CAAC,YAAY,CAAC,CAAC;AAC3D;AACA;AACA;AACA;AACA,MAAME,SAAS,CAAC;EACZC,WAAWA,CAACC,SAAS,EAAEC,YAAY,EAAEC,oBAAoB,EAAE;IACvD,IAAI,CAACF,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC;IACd,IAAI,CAACC,SAAS,GAAG,KAAK;EAC1B;EACA;AACJ;AACA;AACA;AACA;EACIC,QAAQA,CAACC,OAAO,EAAEZ,KAAK,EAAE;IACrB,IAAI,CAAC,IAAI,CAACO,YAAY,IAAIP,KAAK,KAAKa,SAAS,IAAI,IAAI,CAACH,SAAS,EAAE;MAC7D;IACJ;IACAE,OAAO,GAAGA,OAAO,CAACE,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IACzCX,YAAY,CAACY,OAAO,CAAC,IAAI,CAACN,IAAI,EAAEG,OAAO,EAAEZ,KAAK,CAAC;EACnD;EACA;AACJ;AACA;EACIgB,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACP,IAAI;EACpB;EACA;AACJ;AACA;EACIQ,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACX,SAAS,CAACY,MAAM,CAAC,CAAC;EAClC;EACA;AACJ;AACA;AACA;AACA;EACIC,QAAQA,CAACP,OAAO,EAAEQ,IAAI,EAAEC,OAAO,EAAE;IAC7B,IAAI,CAACX,SAAS,GAAG,IAAI;IACrB,IAAIW,OAAO,IAAI,OAAQA,OAAQ,KAAK,QAAQ,EAAE;MAC1CA,OAAO,GAAGpB,MAAM,CAACqB,IAAI,CAACD,OAAO,EAAE;QAC3BE,KAAK,EAAEX,OAAO;QACdY,IAAI,EAAEJ,IAAI,CAACI,IAAI;QACfC,UAAU,EAAEL,IAAI,CAACM;MACrB,CAAC,CAAC;IACN;IACAL,OAAO,GAAGA,OAAO,IAAK,GAAED,IAAI,CAACM,IAAK,yBAAwBd,OAAQ,EAAC;IACnES,OAAO,GAAG,OAAQA,OAAQ,KAAK,UAAU,GAAGA,OAAO,CAACT,OAAO,EAAEQ,IAAI,CAACM,IAAI,EAAEN,IAAI,CAACI,IAAI,CAAC,GAAGH,OAAO;IAC5F;AACR;AACA;AACA;IACQ,IAAI,OAAQ,IAAI,CAACb,oBAAqB,KAAK,UAAU,EAAE;MACnD,IAAI,CAACA,oBAAoB,CAAC,IAAI,CAACF,SAAS,EAAEe,OAAO,EAAET,OAAO,EAAEQ,IAAI,CAACM,IAAI,EAAEN,IAAI,CAACI,IAAI,CAAC;IACrF,CAAC,MACI;MACD;AACZ;AACA;MACY,IAAI,CAAClB,SAAS,CAACqB,QAAQ,CAACN,OAAO,EAAET,OAAO,EAAEQ,IAAI,CAACM,IAAI,EAAEN,IAAI,CAACI,IAAI,CAAC;IACnE;EACJ;AACJ;AACAzB,OAAO,CAACK,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}