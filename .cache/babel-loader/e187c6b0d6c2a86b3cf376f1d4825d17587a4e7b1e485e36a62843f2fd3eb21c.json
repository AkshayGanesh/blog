{"ast":null,"code":"\"use strict\";\n\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst date_fns_1 = require(\"date-fns\");\n/**\n * Returns a boolean telling if value is valid as per the given date format\n * or not.\n *\n * @example\n * ```js\n * const { is } = require('indicative')\n *\n * if (is.dateFormat('2010-11-20', ['YYYY-MM-DD'])) {\n * }\n *\n * // You can also check against multiple format to see if it matches any\n * // one or not\n * if (is.dateFormat('2010-11-20', ['YYYY-MM-DD', 'YYYY/MM/DD'])) {\n * }\n * ```\n */\nexports.dateFormat = (input, formats) => {\n  return (Array.isArray(formats) ? formats : [formats]).some(pattern => {\n    let sanitizedInput = input;\n    let hasTimeZone = false;\n    // Following https://www.w3.org/TR/NOTE-datetime\n    if (pattern.endsWith('ZZ')) {\n      sanitizedInput = input.replace(/(\\+|-)\\d{4}$/, '');\n      pattern = pattern.replace(/ZZ$/, '');\n      hasTimeZone = true;\n    } else if (pattern.endsWith('Z')) {\n      sanitizedInput = input.replace(/Z$/, '').replace(/(\\+|-)\\d{2}:\\d{2}$/, '');\n      pattern = pattern.replace(/Z$/, '');\n      hasTimeZone = true;\n    }\n    const formattedInput = date_fns_1.format(sanitizedInput, pattern);\n    /**\n     * Date is invalid\n     */\n    if (formattedInput === 'Invalid Date') {\n      return false;\n    }\n    /**\n     * When pattern and date doesn't have a timezone, then we ensure\n     * that formatted date as same as user input\n     */\n    if (!hasTimeZone) {\n      return formattedInput === input;\n    }\n    /**\n     * Otherwise formatted date must be same as `input - timezone` and\n     * `input - timezone` isn't same as `input`.\n     */\n    return formattedInput === sanitizedInput && sanitizedInput !== input;\n  });\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","date_fns_1","require","dateFormat","input","formats","Array","isArray","some","pattern","sanitizedInput","hasTimeZone","endsWith","replace","formattedInput","format"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/raw/dateFormat.js"],"sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst date_fns_1 = require(\"date-fns\");\n/**\n * Returns a boolean telling if value is valid as per the given date format\n * or not.\n *\n * @example\n * ```js\n * const { is } = require('indicative')\n *\n * if (is.dateFormat('2010-11-20', ['YYYY-MM-DD'])) {\n * }\n *\n * // You can also check against multiple format to see if it matches any\n * // one or not\n * if (is.dateFormat('2010-11-20', ['YYYY-MM-DD', 'YYYY/MM/DD'])) {\n * }\n * ```\n */\nexports.dateFormat = (input, formats) => {\n    return (Array.isArray(formats) ? formats : [formats]).some(pattern => {\n        let sanitizedInput = input;\n        let hasTimeZone = false;\n        // Following https://www.w3.org/TR/NOTE-datetime\n        if (pattern.endsWith('ZZ')) {\n            sanitizedInput = input.replace(/(\\+|-)\\d{4}$/, '');\n            pattern = pattern.replace(/ZZ$/, '');\n            hasTimeZone = true;\n        }\n        else if (pattern.endsWith('Z')) {\n            sanitizedInput = input.replace(/Z$/, '').replace(/(\\+|-)\\d{2}:\\d{2}$/, '');\n            pattern = pattern.replace(/Z$/, '');\n            hasTimeZone = true;\n        }\n        const formattedInput = date_fns_1.format(sanitizedInput, pattern);\n        /**\n         * Date is invalid\n         */\n        if (formattedInput === 'Invalid Date') {\n            return false;\n        }\n        /**\n         * When pattern and date doesn't have a timezone, then we ensure\n         * that formatted date as same as user input\n         */\n        if (!hasTimeZone) {\n            return formattedInput === input;\n        }\n        /**\n         * Otherwise formatted date must be same as `input - timezone` and\n         * `input - timezone` isn't same as `input`.\n         */\n        return formattedInput === sanitizedInput && sanitizedInput !== input;\n    });\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,UAAU,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,OAAO,CAACI,UAAU,GAAG,CAACC,KAAK,EAAEC,OAAO,KAAK;EACrC,OAAO,CAACC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC,EAAEG,IAAI,CAACC,OAAO,IAAI;IAClE,IAAIC,cAAc,GAAGN,KAAK;IAC1B,IAAIO,WAAW,GAAG,KAAK;IACvB;IACA,IAAIF,OAAO,CAACG,QAAQ,CAAC,IAAI,CAAC,EAAE;MACxBF,cAAc,GAAGN,KAAK,CAACS,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;MAClDJ,OAAO,GAAGA,OAAO,CAACI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MACpCF,WAAW,GAAG,IAAI;IACtB,CAAC,MACI,IAAIF,OAAO,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC5BF,cAAc,GAAGN,KAAK,CAACS,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,oBAAoB,EAAE,EAAE,CAAC;MAC1EJ,OAAO,GAAGA,OAAO,CAACI,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;MACnCF,WAAW,GAAG,IAAI;IACtB;IACA,MAAMG,cAAc,GAAGb,UAAU,CAACc,MAAM,CAACL,cAAc,EAAED,OAAO,CAAC;IACjE;AACR;AACA;IACQ,IAAIK,cAAc,KAAK,cAAc,EAAE;MACnC,OAAO,KAAK;IAChB;IACA;AACR;AACA;AACA;IACQ,IAAI,CAACH,WAAW,EAAE;MACd,OAAOG,cAAc,KAAKV,KAAK;IACnC;IACA;AACR;AACA;AACA;IACQ,OAAOU,cAAc,KAAKJ,cAAc,IAAIA,cAAc,KAAKN,KAAK;EACxE,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}