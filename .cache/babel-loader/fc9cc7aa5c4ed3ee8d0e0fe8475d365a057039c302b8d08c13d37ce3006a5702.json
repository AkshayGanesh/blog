{"ast":null,"code":"\"use strict\";\n\n/**\n * @module compiler/sanitizer\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * indicative-compiler\n *\n * (c) Harminder Virk <virk@adonisjs.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst lodash_get_1 = __importDefault(require(\"lodash.get\"));\n/**\n * Wraps an array of [[SanitizationsRunner]] and executes\n * them based upon the length of an data array at runtime.\n */\nclass ArrayWrapper {\n  constructor(field, index, childSanitizations, dotPath) {\n    this.field = field;\n    this.index = index;\n    this.childSanitizations = childSanitizations;\n    this.dotPath = dotPath;\n    /**\n     * The pointer to read the value of the field inside the data tip\n     */\n    this.pointer = this.dotPath.concat(this.field).join('.');\n  }\n  /**\n   * Returns data copy to the passed to all the children of the array.\n   */\n  getDataCopy(data) {\n    const value = lodash_get_1.default(data.tip, this.pointer);\n    /**\n     * Ensure value is array, otherwise skip the sanitization process.\n     */\n    if (!Array.isArray(value)) {\n      return null;\n    }\n    /**\n     * Since we are adding new properties to the data object. We have\n     * to create a new copy, otherwise the array specific values\n     * will leak this info to other sanitizations as well.\n     */\n    return {\n      original: data.original,\n      tip: null,\n      parentArray: value,\n      currentIndex: this.index === '*' ? 0 : Number(this.index)\n    };\n  }\n  /**\n   * Executes all sanitizations for a given index value inside the array.\n   */\n  executeSanitizations(data, config) {\n    this.childSanitizations.forEach(sanitization => sanitization.exec(data, config));\n  }\n  /**\n   * Execute series of sanitizations for values inside an array\n   */\n  exec(data, config) {\n    const dataCopy = this.getDataCopy(data);\n    if (!dataCopy) {\n      return;\n    }\n    /**\n     * If index is a not a wildcard, then we run validations\n     * just for the given index.\n     */\n    if (this.index !== '*') {\n      dataCopy.tip = dataCopy.parentArray[dataCopy.currentIndex];\n      return this.executeSanitizations(dataCopy, config);\n    }\n    /**\n     * Loop over all the entire array and execute validations\n     * for each field.\n     */\n    dataCopy.parentArray.forEach((item, index) => {\n      dataCopy.tip = item;\n      dataCopy.currentIndex = index;\n      this.executeSanitizations(dataCopy, config);\n    });\n  }\n}\nexports.ArrayWrapper = ArrayWrapper;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","lodash_get_1","require","ArrayWrapper","constructor","field","index","childSanitizations","dotPath","pointer","concat","join","getDataCopy","data","default","tip","Array","isArray","original","parentArray","currentIndex","Number","executeSanitizations","config","forEach","sanitization","exec","dataCopy","item"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-compiler/build/src/Sanitizer/ArrayWrapper.js"],"sourcesContent":["\"use strict\";\n/**\n * @module compiler/sanitizer\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * indicative-compiler\n *\n * (c) Harminder Virk <virk@adonisjs.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst lodash_get_1 = __importDefault(require(\"lodash.get\"));\n/**\n * Wraps an array of [[SanitizationsRunner]] and executes\n * them based upon the length of an data array at runtime.\n */\nclass ArrayWrapper {\n    constructor(field, index, childSanitizations, dotPath) {\n        this.field = field;\n        this.index = index;\n        this.childSanitizations = childSanitizations;\n        this.dotPath = dotPath;\n        /**\n         * The pointer to read the value of the field inside the data tip\n         */\n        this.pointer = this.dotPath.concat(this.field).join('.');\n    }\n    /**\n     * Returns data copy to the passed to all the children of the array.\n     */\n    getDataCopy(data) {\n        const value = lodash_get_1.default(data.tip, this.pointer);\n        /**\n         * Ensure value is array, otherwise skip the sanitization process.\n         */\n        if (!Array.isArray(value)) {\n            return null;\n        }\n        /**\n         * Since we are adding new properties to the data object. We have\n         * to create a new copy, otherwise the array specific values\n         * will leak this info to other sanitizations as well.\n         */\n        return {\n            original: data.original,\n            tip: null,\n            parentArray: value,\n            currentIndex: this.index === '*' ? 0 : Number(this.index),\n        };\n    }\n    /**\n     * Executes all sanitizations for a given index value inside the array.\n     */\n    executeSanitizations(data, config) {\n        this.childSanitizations.forEach((sanitization) => sanitization.exec(data, config));\n    }\n    /**\n     * Execute series of sanitizations for values inside an array\n     */\n    exec(data, config) {\n        const dataCopy = this.getDataCopy(data);\n        if (!dataCopy) {\n            return;\n        }\n        /**\n         * If index is a not a wildcard, then we run validations\n         * just for the given index.\n         */\n        if (this.index !== '*') {\n            dataCopy.tip = dataCopy.parentArray[dataCopy.currentIndex];\n            return this.executeSanitizations(dataCopy, config);\n        }\n        /**\n         * Loop over all the entire array and execute validations\n         * for each field.\n         */\n        dataCopy.parentArray.forEach((item, index) => {\n            dataCopy.tip = item;\n            dataCopy.currentIndex = index;\n            this.executeSanitizations(dataCopy, config);\n        });\n    }\n}\nexports.ArrayWrapper = ArrayWrapper;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGP,eAAe,CAACQ,OAAO,CAAC,YAAY,CAAC,CAAC;AAC3D;AACA;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EACfC,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAEC,kBAAkB,EAAEC,OAAO,EAAE;IACnD,IAAI,CAACH,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,IAAI,CAACD,OAAO,CAACE,MAAM,CAAC,IAAI,CAACL,KAAK,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC;EAC5D;EACA;AACJ;AACA;EACIC,WAAWA,CAACC,IAAI,EAAE;IACd,MAAMb,KAAK,GAAGC,YAAY,CAACa,OAAO,CAACD,IAAI,CAACE,GAAG,EAAE,IAAI,CAACN,OAAO,CAAC;IAC1D;AACR;AACA;IACQ,IAAI,CAACO,KAAK,CAACC,OAAO,CAACjB,KAAK,CAAC,EAAE;MACvB,OAAO,IAAI;IACf;IACA;AACR;AACA;AACA;AACA;IACQ,OAAO;MACHkB,QAAQ,EAAEL,IAAI,CAACK,QAAQ;MACvBH,GAAG,EAAE,IAAI;MACTI,WAAW,EAAEnB,KAAK;MAClBoB,YAAY,EAAE,IAAI,CAACd,KAAK,KAAK,GAAG,GAAG,CAAC,GAAGe,MAAM,CAAC,IAAI,CAACf,KAAK;IAC5D,CAAC;EACL;EACA;AACJ;AACA;EACIgB,oBAAoBA,CAACT,IAAI,EAAEU,MAAM,EAAE;IAC/B,IAAI,CAAChB,kBAAkB,CAACiB,OAAO,CAAEC,YAAY,IAAKA,YAAY,CAACC,IAAI,CAACb,IAAI,EAAEU,MAAM,CAAC,CAAC;EACtF;EACA;AACJ;AACA;EACIG,IAAIA,CAACb,IAAI,EAAEU,MAAM,EAAE;IACf,MAAMI,QAAQ,GAAG,IAAI,CAACf,WAAW,CAACC,IAAI,CAAC;IACvC,IAAI,CAACc,QAAQ,EAAE;MACX;IACJ;IACA;AACR;AACA;AACA;IACQ,IAAI,IAAI,CAACrB,KAAK,KAAK,GAAG,EAAE;MACpBqB,QAAQ,CAACZ,GAAG,GAAGY,QAAQ,CAACR,WAAW,CAACQ,QAAQ,CAACP,YAAY,CAAC;MAC1D,OAAO,IAAI,CAACE,oBAAoB,CAACK,QAAQ,EAAEJ,MAAM,CAAC;IACtD;IACA;AACR;AACA;AACA;IACQI,QAAQ,CAACR,WAAW,CAACK,OAAO,CAAC,CAACI,IAAI,EAAEtB,KAAK,KAAK;MAC1CqB,QAAQ,CAACZ,GAAG,GAAGa,IAAI;MACnBD,QAAQ,CAACP,YAAY,GAAGd,KAAK;MAC7B,IAAI,CAACgB,oBAAoB,CAACK,QAAQ,EAAEJ,MAAM,CAAC;IAC/C,CAAC,CAAC;EACN;AACJ;AACAxB,OAAO,CAACI,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}