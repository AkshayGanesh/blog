{"ast":null,"code":"\"use strict\";\n\n/**\n * @module compiler/validator\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst indicative_parser_1 = require(\"indicative-parser\");\nconst TreeWalker_1 = require(\"../TreeWalker\");\nconst ArrayWrapper_1 = require(\"./ArrayWrapper\");\nconst ValidationsRunner_1 = require(\"./ValidationsRunner\");\n/**\n * Compiles rules and messages schema to an array of top level\n * functions highly optimized for speed.\n */\nclass Compiler {\n  constructor(schema, messages, validations) {\n    this.validations = validations;\n    this.parsedSchema = indicative_parser_1.rulesParser(schema);\n    this.parsedMessages = indicative_parser_1.messagesParser(messages);\n  }\n  /**\n   * Compiles the schema to an array of functions\n   */\n  compile() {\n    return new TreeWalker_1.TreeWalker(\n    /**\n     * Consume each node inside the tree\n     */\n    (field, type, rules, dotPath, pointer) => {\n      const messages = this.parsedMessages.fields[pointer] || {};\n      const genericMessage = this.parsedMessages.rules;\n      return new ValidationsRunner_1.ValidationsRunner(field, type, dotPath, rules, this.validations, messages, genericMessage);\n    },\n    /**\n     * Wraps array children, since the length of array is unknown.\n     */\n    (index, field, children, dotPath) => {\n      return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);\n    }).walk(this.parsedSchema);\n  }\n}\nexports.Compiler = Compiler;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_parser_1","require","TreeWalker_1","ArrayWrapper_1","ValidationsRunner_1","Compiler","constructor","schema","messages","validations","parsedSchema","rulesParser","parsedMessages","messagesParser","compile","TreeWalker","field","type","rules","dotPath","pointer","fields","genericMessage","ValidationsRunner","index","children","ArrayWrapper","walk"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-compiler/build/src/Validator/Compiler.js"],"sourcesContent":["\"use strict\";\n/**\n * @module compiler/validator\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst indicative_parser_1 = require(\"indicative-parser\");\nconst TreeWalker_1 = require(\"../TreeWalker\");\nconst ArrayWrapper_1 = require(\"./ArrayWrapper\");\nconst ValidationsRunner_1 = require(\"./ValidationsRunner\");\n/**\n * Compiles rules and messages schema to an array of top level\n * functions highly optimized for speed.\n */\nclass Compiler {\n    constructor(schema, messages, validations) {\n        this.validations = validations;\n        this.parsedSchema = indicative_parser_1.rulesParser(schema);\n        this.parsedMessages = indicative_parser_1.messagesParser(messages);\n    }\n    /**\n     * Compiles the schema to an array of functions\n     */\n    compile() {\n        return new TreeWalker_1.TreeWalker(\n        /**\n         * Consume each node inside the tree\n         */\n        (field, type, rules, dotPath, pointer) => {\n            const messages = this.parsedMessages.fields[pointer] || {};\n            const genericMessage = this.parsedMessages.rules;\n            return new ValidationsRunner_1.ValidationsRunner(field, type, dotPath, rules, this.validations, messages, genericMessage);\n        }, \n        /**\n         * Wraps array children, since the length of array is unknown.\n         */\n        (index, field, children, dotPath) => {\n            return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);\n        }).walk(this.parsedSchema);\n    }\n}\nexports.Compiler = Compiler;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACxD,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC7C,MAAME,cAAc,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAChD,MAAMG,mBAAmB,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAC1D;AACA;AACA;AACA;AACA,MAAMI,QAAQ,CAAC;EACXC,WAAWA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,EAAE;IACvC,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,YAAY,GAAGV,mBAAmB,CAACW,WAAW,CAACJ,MAAM,CAAC;IAC3D,IAAI,CAACK,cAAc,GAAGZ,mBAAmB,CAACa,cAAc,CAACL,QAAQ,CAAC;EACtE;EACA;AACJ;AACA;EACIM,OAAOA,CAAA,EAAG;IACN,OAAO,IAAIZ,YAAY,CAACa,UAAU;IAClC;AACR;AACA;IACQ,CAACC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAEC,OAAO,KAAK;MACtC,MAAMZ,QAAQ,GAAG,IAAI,CAACI,cAAc,CAACS,MAAM,CAACD,OAAO,CAAC,IAAI,CAAC,CAAC;MAC1D,MAAME,cAAc,GAAG,IAAI,CAACV,cAAc,CAACM,KAAK;MAChD,OAAO,IAAId,mBAAmB,CAACmB,iBAAiB,CAACP,KAAK,EAAEC,IAAI,EAAEE,OAAO,EAAED,KAAK,EAAE,IAAI,CAACT,WAAW,EAAED,QAAQ,EAAEc,cAAc,CAAC;IAC7H,CAAC;IACD;AACR;AACA;IACQ,CAACE,KAAK,EAAER,KAAK,EAAES,QAAQ,EAAEN,OAAO,KAAK;MACjC,OAAO,IAAIhB,cAAc,CAACuB,YAAY,CAACV,KAAK,EAAEQ,KAAK,EAAEC,QAAQ,EAAEN,OAAO,CAAC;IAC3E,CAAC,CAAC,CAACQ,IAAI,CAAC,IAAI,CAACjB,YAAY,CAAC;EAC9B;AACJ;AACAZ,OAAO,CAACO,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}