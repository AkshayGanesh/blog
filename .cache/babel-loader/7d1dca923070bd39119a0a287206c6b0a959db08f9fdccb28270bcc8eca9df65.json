{"ast":null,"code":"\"use strict\";\n\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst inArray_1 = require(\"../../raw/inArray\");\nconst MISSING_VALUE = 'notIn:make sure to define search collection';\n/**\n * Enforces the field value not to be one of the allowed values.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   username: 'not_in:root,admin,super'\n * }\n *\n * // or\n * const rules = {\n *   username: [\n *     validations.notIn(['root', 'admin', 'super'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n  async: false,\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    return args;\n  },\n  validate: (data, field, args, config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    return indicative_utils_1.skippable(fieldValue, field, config) || !inArray_1.inArray(fieldValue, args);\n  }\n};\nexports.default = validation;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_utils_1","require","inArray_1","MISSING_VALUE","validation","async","compile","args","ensureLength","validate","data","field","config","fieldValue","getValue","skippable","inArray","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/validations/primitives/notIn.js"],"sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst inArray_1 = require(\"../../raw/inArray\");\nconst MISSING_VALUE = 'notIn:make sure to define search collection';\n/**\n * Enforces the field value not to be one of the allowed values.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   username: 'not_in:root,admin,super'\n * }\n *\n * // or\n * const rules = {\n *   username: [\n *     validations.notIn(['root', 'admin', 'super'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        return args;\n    },\n    validate: (data, field, args, config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        return indicative_utils_1.skippable(fieldValue, field, config) || !inArray_1.inArray(fieldValue, args);\n    },\n};\nexports.default = validation;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD,MAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAME,aAAa,GAAG,6CAA6C;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG;EACfC,KAAK,EAAE,KAAK;EACZC,OAAOA,CAACC,IAAI,EAAE;IACVP,kBAAkB,CAACQ,YAAY,CAACD,IAAI,EAAEJ,aAAa,EAAE,CAAC,CAAC;IACvD,OAAOI,IAAI;EACf,CAAC;EACDE,QAAQ,EAAEA,CAACC,IAAI,EAAEC,KAAK,EAAEJ,IAAI,EAAEK,MAAM,KAAK;IACrC,MAAMC,UAAU,GAAGb,kBAAkB,CAACc,QAAQ,CAACJ,IAAI,EAAEC,KAAK,CAAC;IAC3D,OAAOX,kBAAkB,CAACe,SAAS,CAACF,UAAU,EAAEF,KAAK,EAAEC,MAAM,CAAC,IAAI,CAACV,SAAS,CAACc,OAAO,CAACH,UAAU,EAAEN,IAAI,CAAC;EAC1G;AACJ,CAAC;AACDT,OAAO,CAACmB,OAAO,GAAGb,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}