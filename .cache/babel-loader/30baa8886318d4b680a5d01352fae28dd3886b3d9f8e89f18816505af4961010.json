{"ast":null,"code":"\"use strict\";\n\n/**\n * @module indicative-rules\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst slug_1 = __importDefault(require(\"@slynova/slug\"));\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Converts a string to a URL friendly slug. If value is not a string, it will be\n * returned as it is.\n *\n * Also it will handle ascii charmaps and converts them to their utf-8 counter parts.\n *\n * ```text\n * I am > than you\n * ```\n *\n * will become\n *\n * ```text\n * i-am-greater-than-you\n * ```\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   slug: 'slug'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   slug: [\n *     sanitizations.slug()\n *   ]\n * }\n * ```\n */\nconst slug = {\n  sanitize(data, field) {\n    let fieldValue = indicative_utils_1.getValue(data, field);\n    if (typeof fieldValue !== 'string') {\n      return;\n    }\n    indicative_utils_1.patchValue(data, field, slug_1.default(fieldValue));\n  }\n};\nexports.default = slug;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","slug_1","require","indicative_utils_1","slug","sanitize","data","field","fieldValue","getValue","patchValue","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/sanitizations/slug.js"],"sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst slug_1 = __importDefault(require(\"@slynova/slug\"));\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Converts a string to a URL friendly slug. If value is not a string, it will be\n * returned as it is.\n *\n * Also it will handle ascii charmaps and converts them to their utf-8 counter parts.\n *\n * ```text\n * I am > than you\n * ```\n *\n * will become\n *\n * ```text\n * i-am-greater-than-you\n * ```\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   slug: 'slug'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   slug: [\n *     sanitizations.slug()\n *   ]\n * }\n * ```\n */\nconst slug = {\n    sanitize(data, field) {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (typeof (fieldValue) !== 'string') {\n            return;\n        }\n        indicative_utils_1.patchValue(data, field, slug_1.default(fieldValue));\n    },\n};\nexports.default = slug;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAGP,eAAe,CAACQ,OAAO,CAAC,eAAe,CAAC,CAAC;AACxD,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,IAAI,GAAG;EACTC,QAAQA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAClB,IAAIC,UAAU,GAAGL,kBAAkB,CAACM,QAAQ,CAACH,IAAI,EAAEC,KAAK,CAAC;IACzD,IAAI,OAAQC,UAAW,KAAK,QAAQ,EAAE;MAClC;IACJ;IACAL,kBAAkB,CAACO,UAAU,CAACJ,IAAI,EAAEC,KAAK,EAAEN,MAAM,CAACU,OAAO,CAACH,UAAU,CAAC,CAAC;EAC1E;AACJ,CAAC;AACDT,OAAO,CAACY,OAAO,GAAGP,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}