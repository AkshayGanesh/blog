{"ast":null,"code":"\"use strict\";\n\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Enforce the field value to be valid float value. This rule will\n * cast the string representation of number to a float value.\n *\n * [casts]\n *   [label from=\"string\", to=\"integer\", toText=\"float\"]\n * [/casts]\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   age: 'float'\n * }\n *\n * // or\n * const rules = {\n *   age: [\n *     validations.float()\n *   ]\n * }\n * ```\n */\nconst validation = {\n  async: false,\n  validate: (data, field, _args, config) => {\n    let fieldValue = indicative_utils_1.getValue(data, field);\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n    /**\n     * Ensure value is castable to number\n     */\n    const castedValue = indicative_utils_1.cast(fieldValue, 'float');\n    if (castedValue === null) {\n      return false;\n    }\n    /**\n     * Mutate field value\n     */\n    indicative_utils_1.patchValue(data, field, castedValue);\n    return true;\n  }\n};\nexports.default = validation;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_utils_1","require","validation","async","validate","data","field","_args","config","fieldValue","getValue","skippable","castedValue","cast","patchValue","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/validations/number/float.js"],"sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Enforce the field value to be valid float value. This rule will\n * cast the string representation of number to a float value.\n *\n * [casts]\n *   [label from=\"string\", to=\"integer\", toText=\"float\"]\n * [/casts]\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   age: 'float'\n * }\n *\n * // or\n * const rules = {\n *   age: [\n *     validations.float()\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    validate: (data, field, _args, config) => {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        /**\n         * Ensure value is castable to number\n         */\n        const castedValue = indicative_utils_1.cast(fieldValue, 'float');\n        if (castedValue === null) {\n            return false;\n        }\n        /**\n         * Mutate field value\n         */\n        indicative_utils_1.patchValue(data, field, castedValue);\n        return true;\n    },\n};\nexports.default = validation;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG;EACfC,KAAK,EAAE,KAAK;EACZC,QAAQ,EAAEA,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,KAAK;IACtC,IAAIC,UAAU,GAAGT,kBAAkB,CAACU,QAAQ,CAACL,IAAI,EAAEC,KAAK,CAAC;IACzD,IAAIN,kBAAkB,CAACW,SAAS,CAACF,UAAU,EAAEH,KAAK,EAAEE,MAAM,CAAC,EAAE;MACzD,OAAO,IAAI;IACf;IACA;AACR;AACA;IACQ,MAAMI,WAAW,GAAGZ,kBAAkB,CAACa,IAAI,CAACJ,UAAU,EAAE,OAAO,CAAC;IAChE,IAAIG,WAAW,KAAK,IAAI,EAAE;MACtB,OAAO,KAAK;IAChB;IACA;AACR;AACA;IACQZ,kBAAkB,CAACc,UAAU,CAACT,IAAI,EAAEC,KAAK,EAAEM,WAAW,CAAC;IACvD,OAAO,IAAI;EACf;AACJ,CAAC;AACDd,OAAO,CAACiB,OAAO,GAAGb,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}