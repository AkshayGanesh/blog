{"ast":null,"code":"\"use strict\";\n\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst before_1 = require(\"./before\");\nconst utils_1 = require(\"../utils\");\n/**\n * Returns a boolean telling if input date is before the given\n * offset or not.\n *\n * The `key` has to be one of the following values.\n *\n * - years\n * - quarters\n * - months\n * - weeks\n * - days\n * - hours\n * - minutes\n * - seconds\n * - milliseconds\n *\n * @example\n * ```js\n * const { is } = require('indicative')\n * const inputDate = new Date().setDate(new Date().getDate() - 11)\n *\n * if (is.beforeOffsetOf(inputDate, 10, 'days')) {\n * }\n * ```\n */\nexports.beforeOffsetOf = (input, diffUnit, key) => {\n  const expectedDate = utils_1.calcUnits(diffUnit, key, '-');\n  return expectedDate ? before_1.before(input, expectedDate) : false;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","before_1","require","utils_1","beforeOffsetOf","input","diffUnit","key","expectedDate","calcUnits","before"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/raw/beforeOffsetOf.js"],"sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst before_1 = require(\"./before\");\nconst utils_1 = require(\"../utils\");\n/**\n * Returns a boolean telling if input date is before the given\n * offset or not.\n *\n * The `key` has to be one of the following values.\n *\n * - years\n * - quarters\n * - months\n * - weeks\n * - days\n * - hours\n * - minutes\n * - seconds\n * - milliseconds\n *\n * @example\n * ```js\n * const { is } = require('indicative')\n * const inputDate = new Date().setDate(new Date().getDate() - 11)\n *\n * if (is.beforeOffsetOf(inputDate, 10, 'days')) {\n * }\n * ```\n */\nexports.beforeOffsetOf = (input, diffUnit, key) => {\n    const expectedDate = utils_1.calcUnits(diffUnit, key, '-');\n    return expectedDate ? before_1.before(input, expectedDate) : false;\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,OAAO,CAACK,cAAc,GAAG,CAACC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,KAAK;EAC/C,MAAMC,YAAY,GAAGL,OAAO,CAACM,SAAS,CAACH,QAAQ,EAAEC,GAAG,EAAE,GAAG,CAAC;EAC1D,OAAOC,YAAY,GAAGP,QAAQ,CAACS,MAAM,CAACL,KAAK,EAAEG,YAAY,CAAC,GAAG,KAAK;AACtE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}