{"ast":null,"code":"\"use strict\";\n\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst MISSING_VALUE = 'max: make sure to define max length';\nconst INVALID_TYPE = 'max: length must be defined as an integer';\n/**\n * Enforces the value to have maximum length as per defined by the rule. The\n * value type has to be a `string` or `array`, otherwise validation will\n * fail.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   username: 'max:40'\n * }\n *\n * // or\n * const rules = {\n *   username: [\n *     validations.max([40])\n *   ]\n * }\n * ```\n */\nconst validation = {\n  async: false,\n  /**\n   * Cleaning up user arguments to make sure that they are\n   * useable at runtime\n   */\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    const maxLength = indicative_utils_1.cast(args[0], 'integer', INVALID_TYPE);\n    return [maxLength];\n  },\n  /**\n   * Validating runtime data\n   */\n  validate: (data, field, _ref, config) => {\n    let [maxLength] = _ref;\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n    if (Array.isArray(fieldValue) || typeof fieldValue === 'string') {\n      return fieldValue.length <= maxLength;\n    }\n    return false;\n  }\n};\nexports.default = validation;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_utils_1","require","MISSING_VALUE","INVALID_TYPE","validation","async","compile","args","ensureLength","maxLength","cast","validate","data","field","_ref","config","fieldValue","getValue","skippable","Array","isArray","length","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/validations/array-and-string/max.js"],"sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst MISSING_VALUE = 'max: make sure to define max length';\nconst INVALID_TYPE = 'max: length must be defined as an integer';\n/**\n * Enforces the value to have maximum length as per defined by the rule. The\n * value type has to be a `string` or `array`, otherwise validation will\n * fail.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   username: 'max:40'\n * }\n *\n * // or\n * const rules = {\n *   username: [\n *     validations.max([40])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    /**\n     * Cleaning up user arguments to make sure that they are\n     * useable at runtime\n     */\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        const maxLength = indicative_utils_1.cast(args[0], 'integer', INVALID_TYPE);\n        return [maxLength];\n    },\n    /**\n     * Validating runtime data\n     */\n    validate: (data, field, [maxLength], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        if (Array.isArray(fieldValue) || typeof (fieldValue) === 'string') {\n            return fieldValue.length <= maxLength;\n        }\n        return false;\n    },\n};\nexports.default = validation;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD,MAAMC,aAAa,GAAG,qCAAqC;AAC3D,MAAMC,YAAY,GAAG,2CAA2C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG;EACfC,KAAK,EAAE,KAAK;EACZ;AACJ;AACA;AACA;EACIC,OAAOA,CAACC,IAAI,EAAE;IACVP,kBAAkB,CAACQ,YAAY,CAACD,IAAI,EAAEL,aAAa,EAAE,CAAC,CAAC;IACvD,MAAMO,SAAS,GAAGT,kBAAkB,CAACU,IAAI,CAACH,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,EAAEJ,YAAY,CAAC;IAC3E,OAAO,CAACM,SAAS,CAAC;EACtB,CAAC;EACD;AACJ;AACA;EACIE,QAAQ,EAAEA,CAACC,IAAI,EAAEC,KAAK,EAAAC,IAAA,EAAeC,MAAM,KAAK;IAAA,IAAxB,CAACN,SAAS,CAAC,GAAAK,IAAA;IAC/B,MAAME,UAAU,GAAGhB,kBAAkB,CAACiB,QAAQ,CAACL,IAAI,EAAEC,KAAK,CAAC;IAC3D,IAAIb,kBAAkB,CAACkB,SAAS,CAACF,UAAU,EAAEH,KAAK,EAAEE,MAAM,CAAC,EAAE;MACzD,OAAO,IAAI;IACf;IACA,IAAII,KAAK,CAACC,OAAO,CAACJ,UAAU,CAAC,IAAI,OAAQA,UAAW,KAAK,QAAQ,EAAE;MAC/D,OAAOA,UAAU,CAACK,MAAM,IAAIZ,SAAS;IACzC;IACA,OAAO,KAAK;EAChB;AACJ,CAAC;AACDX,OAAO,CAACwB,OAAO,GAAGlB,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}