{"ast":null,"code":"\"use strict\";\n\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst same_1 = require(\"../../raw/same\");\nfunction castType(input, type) {\n  if (type === 'string') {\n    return indicative_utils_1.cast(input, 'string');\n  }\n  if (type === 'number') {\n    return indicative_utils_1.cast(input, 'integer');\n  }\n  return input;\n}\n/**\n * Checks whether the field has been confirmed with same value or not using\n * the `_confirmation` convention. For example:\n *\n * The `password_confirmation` must exist and have the same value as the\n * `password` field.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   password: 'confirmed'\n * }\n *\n * // or\n * const rules = {\n *   password: [\n *     validations.confirmed()\n *   ]\n * }\n * ```\n */\nconst validation = {\n  async: false,\n  validate: (data, field, _args, config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n    const valueType = typeof fieldValue;\n    let comparisonValue = indicative_utils_1.getValue(data, `${field}_confirmation`);\n    /**\n     * Cast type of comparison value when types are different. This is\n     * important since the end-user has no way to cast type of the\n     * confirmed field. For example:\n     *\n     * 1. Add `number` rule to the `pincode` field, which will cast the\n     *    pincode to `number`.\n     * 2. Also add `confirmed` rule to `pincode`, now you cannot cast\n     *    it's value, so we need to do type conversion here.\n     */\n    /* eslint \"valid-typeof\": \"off\" */\n    if (typeof comparisonValue !== valueType) {\n      comparisonValue = castType(comparisonValue, valueType);\n    }\n    return same_1.same(fieldValue, comparisonValue);\n  }\n};\nexports.default = validation;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_utils_1","require","same_1","castType","input","type","cast","validation","async","validate","data","field","_args","config","fieldValue","getValue","skippable","valueType","comparisonValue","same","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/validations/primitives/confirmed.js"],"sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst same_1 = require(\"../../raw/same\");\nfunction castType(input, type) {\n    if (type === 'string') {\n        return indicative_utils_1.cast(input, 'string');\n    }\n    if (type === 'number') {\n        return indicative_utils_1.cast(input, 'integer');\n    }\n    return input;\n}\n/**\n * Checks whether the field has been confirmed with same value or not using\n * the `_confirmation` convention. For example:\n *\n * The `password_confirmation` must exist and have the same value as the\n * `password` field.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   password: 'confirmed'\n * }\n *\n * // or\n * const rules = {\n *   password: [\n *     validations.confirmed()\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    validate: (data, field, _args, config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        const valueType = typeof (fieldValue);\n        let comparisonValue = indicative_utils_1.getValue(data, `${field}_confirmation`);\n        /**\n         * Cast type of comparison value when types are different. This is\n         * important since the end-user has no way to cast type of the\n         * confirmed field. For example:\n         *\n         * 1. Add `number` rule to the `pincode` field, which will cast the\n         *    pincode to `number`.\n         * 2. Also add `confirmed` rule to `pincode`, now you cannot cast\n         *    it's value, so we need to do type conversion here.\n         */\n        /* eslint \"valid-typeof\": \"off\" */\n        if (typeof (comparisonValue) !== valueType) {\n            comparisonValue = castType(comparisonValue, valueType);\n        }\n        return same_1.same(fieldValue, comparisonValue);\n    },\n};\nexports.default = validation;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD,MAAMC,MAAM,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACxC,SAASE,QAAQA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC3B,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACnB,OAAOL,kBAAkB,CAACM,IAAI,CAACF,KAAK,EAAE,QAAQ,CAAC;EACnD;EACA,IAAIC,IAAI,KAAK,QAAQ,EAAE;IACnB,OAAOL,kBAAkB,CAACM,IAAI,CAACF,KAAK,EAAE,SAAS,CAAC;EACpD;EACA,OAAOA,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,UAAU,GAAG;EACfC,KAAK,EAAE,KAAK;EACZC,QAAQ,EAAEA,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,KAAK;IACtC,MAAMC,UAAU,GAAGd,kBAAkB,CAACe,QAAQ,CAACL,IAAI,EAAEC,KAAK,CAAC;IAC3D,IAAIX,kBAAkB,CAACgB,SAAS,CAACF,UAAU,EAAEH,KAAK,EAAEE,MAAM,CAAC,EAAE;MACzD,OAAO,IAAI;IACf;IACA,MAAMI,SAAS,GAAG,OAAQH,UAAW;IACrC,IAAII,eAAe,GAAGlB,kBAAkB,CAACe,QAAQ,CAACL,IAAI,EAAG,GAAEC,KAAM,eAAc,CAAC;IAChF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ;IACA,IAAI,OAAQO,eAAgB,KAAKD,SAAS,EAAE;MACxCC,eAAe,GAAGf,QAAQ,CAACe,eAAe,EAAED,SAAS,CAAC;IAC1D;IACA,OAAOf,MAAM,CAACiB,IAAI,CAACL,UAAU,EAAEI,eAAe,CAAC;EACnD;AACJ,CAAC;AACDpB,OAAO,CAACsB,OAAO,GAAGb,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}