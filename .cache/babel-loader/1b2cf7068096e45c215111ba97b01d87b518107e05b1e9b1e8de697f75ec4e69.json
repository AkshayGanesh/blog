{"ast":null,"code":"\"use strict\";\n\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst empty_1 = require(\"../../raw/empty\");\nconst MISSING_VALUES = 'requiredWhen:make sure to define target field and it\\'s expected value';\n/**\n * Enforces the field value to exist when the target field value matches the given\n * value. For example: Ask for `address` when value for `checkout_type=deliver`.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   address: 'required_when:checkout_type,deliver'\n * }\n *\n * // or\n * const rules = {\n *   address: [\n *     validations.requiredWhen(['checkout_type', 'deliver'])\n *   ]\n * }\n * ```\n *\n * You can also define an array of values to match from. For example: Ask for\n * the `county` when `country=Uk or US`.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   state: [\n *     validations.requiredWhen(['country', ['UK', 'US']])\n *   ]\n * }\n * ```\n */\nconst validation = {\n  async: false,\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n    return [String(args[0]), args[1]];\n  },\n  validate: (data, field, _ref) => {\n    let [targetField, expectedValues] = _ref;\n    const targetFieldValue = indicative_utils_1.getValue(data, targetField);\n    if (empty_1.empty(targetFieldValue)) {\n      return true;\n    }\n    /**\n     * Ignore when expectedValues are array and none of the values matches\n     * the value of the targeted field.\n     */\n    /* eslint eqeqeq: \"off\" */\n    if (Array.isArray(expectedValues)) {\n      if (!expectedValues.find(value => targetFieldValue == value)) {\n        return true;\n      }\n    } else if (targetFieldValue != expectedValues) {\n      return true;\n    }\n    return !empty_1.empty(indicative_utils_1.getValue(data, field));\n  }\n};\nexports.default = validation;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_utils_1","require","empty_1","MISSING_VALUES","validation","async","compile","args","ensureLength","String","validate","data","field","_ref","targetField","expectedValues","targetFieldValue","getValue","empty","Array","isArray","find","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/validations/existence/requiredWhen.js"],"sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst empty_1 = require(\"../../raw/empty\");\nconst MISSING_VALUES = 'requiredWhen:make sure to define target field and it\\'s expected value';\n/**\n * Enforces the field value to exist when the target field value matches the given\n * value. For example: Ask for `address` when value for `checkout_type=deliver`.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   address: 'required_when:checkout_type,deliver'\n * }\n *\n * // or\n * const rules = {\n *   address: [\n *     validations.requiredWhen(['checkout_type', 'deliver'])\n *   ]\n * }\n * ```\n *\n * You can also define an array of values to match from. For example: Ask for\n * the `county` when `country=Uk or US`.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   state: [\n *     validations.requiredWhen(['country', ['UK', 'US']])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n        return [String(args[0]), args[1]];\n    },\n    validate: (data, field, [targetField, expectedValues]) => {\n        const targetFieldValue = indicative_utils_1.getValue(data, targetField);\n        if (empty_1.empty(targetFieldValue)) {\n            return true;\n        }\n        /**\n         * Ignore when expectedValues are array and none of the values matches\n         * the value of the targeted field.\n         */\n        /* eslint eqeqeq: \"off\" */\n        if (Array.isArray(expectedValues)) {\n            if (!expectedValues.find((value) => targetFieldValue == value)) {\n                return true;\n            }\n        }\n        else if (targetFieldValue != expectedValues) {\n            return true;\n        }\n        return !empty_1.empty(indicative_utils_1.getValue(data, field));\n    },\n};\nexports.default = validation;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC1C,MAAME,cAAc,GAAG,wEAAwE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG;EACfC,KAAK,EAAE,KAAK;EACZC,OAAOA,CAACC,IAAI,EAAE;IACVP,kBAAkB,CAACQ,YAAY,CAACD,IAAI,EAAEJ,cAAc,EAAE,CAAC,CAAC;IACxD,OAAO,CAACM,MAAM,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;EACrC,CAAC;EACDG,QAAQ,EAAEA,CAACC,IAAI,EAAEC,KAAK,EAAAC,IAAA,KAAoC;IAAA,IAAlC,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAAF,IAAA;IACjD,MAAMG,gBAAgB,GAAGhB,kBAAkB,CAACiB,QAAQ,CAACN,IAAI,EAAEG,WAAW,CAAC;IACvE,IAAIZ,OAAO,CAACgB,KAAK,CAACF,gBAAgB,CAAC,EAAE;MACjC,OAAO,IAAI;IACf;IACA;AACR;AACA;AACA;IACQ;IACA,IAAIG,KAAK,CAACC,OAAO,CAACL,cAAc,CAAC,EAAE;MAC/B,IAAI,CAACA,cAAc,CAACM,IAAI,CAAEtB,KAAK,IAAKiB,gBAAgB,IAAIjB,KAAK,CAAC,EAAE;QAC5D,OAAO,IAAI;MACf;IACJ,CAAC,MACI,IAAIiB,gBAAgB,IAAID,cAAc,EAAE;MACzC,OAAO,IAAI;IACf;IACA,OAAO,CAACb,OAAO,CAACgB,KAAK,CAAClB,kBAAkB,CAACiB,QAAQ,CAACN,IAAI,EAAEC,KAAK,CAAC,CAAC;EACnE;AACJ,CAAC;AACDd,OAAO,CAACwB,OAAO,GAAGlB,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}