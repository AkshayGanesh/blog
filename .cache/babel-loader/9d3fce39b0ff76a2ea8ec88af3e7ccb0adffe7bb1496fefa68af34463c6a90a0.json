{"ast":null,"code":"\"use strict\";\n\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst subset_1 = require(\"../../raw/subset\");\nconst isString_1 = require(\"../../raw/isString\");\nconst MISSING_VALUE = 'subset:make sure to define subset collection';\n/**\n * Enforces the value of a given field is a subset of expected values. The\n * field value must be an `array` or a `string` of comma seperated values.\n *\n * [casts]\n *   [label fromText=\"comma seperated string\", from=\"string\", to=\"array\"]\n * [/casts]\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   sort_by: 'subset:email,id,name'\n * }\n *\n * // or\n * const rules = {\n *   sort_by: [\n *     validations.subset(['email', 'id', 'name'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n  async: false,\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    return args.map(arg => indicative_utils_1.cast(arg, 'string'));\n  },\n  validate: (data, field, args, config) => {\n    let fieldValue = indicative_utils_1.getValue(data, field);\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n    /**\n     * Convert to array if value is a string\n     */\n    if (isString_1.isString(fieldValue)) {\n      fieldValue = fieldValue.split(',').map(val => val.trim());\n    } else if (Array.isArray(fieldValue)) {\n      fieldValue = fieldValue.map(value => indicative_utils_1.cast(value, 'string'));\n    } else {\n      return false;\n    }\n    if (!subset_1.subset(fieldValue, args)) {\n      return false;\n    }\n    /**\n     * Mutate data field\n     */\n    indicative_utils_1.patchValue(data, field, fieldValue);\n    return true;\n  }\n};\nexports.default = validation;","map":{"version":3,"names":["Object","defineProperty","exports","value","indicative_utils_1","require","subset_1","isString_1","MISSING_VALUE","validation","async","compile","args","ensureLength","map","arg","cast","validate","data","field","config","fieldValue","getValue","skippable","isString","split","val","trim","Array","isArray","subset","patchValue","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/validations/array-and-string/subset.js"],"sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst subset_1 = require(\"../../raw/subset\");\nconst isString_1 = require(\"../../raw/isString\");\nconst MISSING_VALUE = 'subset:make sure to define subset collection';\n/**\n * Enforces the value of a given field is a subset of expected values. The\n * field value must be an `array` or a `string` of comma seperated values.\n *\n * [casts]\n *   [label fromText=\"comma seperated string\", from=\"string\", to=\"array\"]\n * [/casts]\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   sort_by: 'subset:email,id,name'\n * }\n *\n * // or\n * const rules = {\n *   sort_by: [\n *     validations.subset(['email', 'id', 'name'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        return args.map((arg) => indicative_utils_1.cast(arg, 'string'));\n    },\n    validate: (data, field, args, config) => {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        /**\n         * Convert to array if value is a string\n         */\n        if (isString_1.isString(fieldValue)) {\n            fieldValue = fieldValue.split(',').map((val) => val.trim());\n        }\n        else if (Array.isArray(fieldValue)) {\n            fieldValue = fieldValue.map((value) => indicative_utils_1.cast(value, 'string'));\n        }\n        else {\n            return false;\n        }\n        if (!subset_1.subset(fieldValue, args)) {\n            return false;\n        }\n        /**\n         * Mutate data field\n         */\n        indicative_utils_1.patchValue(data, field, fieldValue);\n        return true;\n    },\n};\nexports.default = validation;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAME,UAAU,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAChD,MAAMG,aAAa,GAAG,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG;EACfC,KAAK,EAAE,KAAK;EACZC,OAAOA,CAACC,IAAI,EAAE;IACVR,kBAAkB,CAACS,YAAY,CAACD,IAAI,EAAEJ,aAAa,EAAE,CAAC,CAAC;IACvD,OAAOI,IAAI,CAACE,GAAG,CAAEC,GAAG,IAAKX,kBAAkB,CAACY,IAAI,CAACD,GAAG,EAAE,QAAQ,CAAC,CAAC;EACpE,CAAC;EACDE,QAAQ,EAAEA,CAACC,IAAI,EAAEC,KAAK,EAAEP,IAAI,EAAEQ,MAAM,KAAK;IACrC,IAAIC,UAAU,GAAGjB,kBAAkB,CAACkB,QAAQ,CAACJ,IAAI,EAAEC,KAAK,CAAC;IACzD,IAAIf,kBAAkB,CAACmB,SAAS,CAACF,UAAU,EAAEF,KAAK,EAAEC,MAAM,CAAC,EAAE;MACzD,OAAO,IAAI;IACf;IACA;AACR;AACA;IACQ,IAAIb,UAAU,CAACiB,QAAQ,CAACH,UAAU,CAAC,EAAE;MACjCA,UAAU,GAAGA,UAAU,CAACI,KAAK,CAAC,GAAG,CAAC,CAACX,GAAG,CAAEY,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;IAC/D,CAAC,MACI,IAAIC,KAAK,CAACC,OAAO,CAACR,UAAU,CAAC,EAAE;MAChCA,UAAU,GAAGA,UAAU,CAACP,GAAG,CAAEX,KAAK,IAAKC,kBAAkB,CAACY,IAAI,CAACb,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpF,CAAC,MACI;MACD,OAAO,KAAK;IAChB;IACA,IAAI,CAACG,QAAQ,CAACwB,MAAM,CAACT,UAAU,EAAET,IAAI,CAAC,EAAE;MACpC,OAAO,KAAK;IAChB;IACA;AACR;AACA;IACQR,kBAAkB,CAAC2B,UAAU,CAACb,IAAI,EAAEC,KAAK,EAAEE,UAAU,CAAC;IACtD,OAAO,IAAI;EACf;AACJ,CAAC;AACDnB,OAAO,CAAC8B,OAAO,GAAGvB,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}