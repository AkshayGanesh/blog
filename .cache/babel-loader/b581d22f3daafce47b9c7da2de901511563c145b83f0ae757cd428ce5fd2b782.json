{"ast":null,"code":"\"use strict\";\n\n/**\n * @module indicative-rules\n */\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst pluralize = __importStar(require(\"pluralize\"));\n/**\n * Converts a value to it's singular version. If value is not a string\n * then it will be returned as it is.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   modelName: 'singular'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   modelName: [\n *     sanitizations.singular()\n *   ]\n * }\n * ```\n */\nconst singular = {\n  sanitize(data, field) {\n    let fieldValue = indicative_utils_1.getValue(data, field);\n    if (typeof fieldValue !== 'string') {\n      return;\n    }\n    indicative_utils_1.patchValue(data, field, pluralize.singular(fieldValue));\n  }\n};\nexports.default = singular;","map":{"version":3,"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","indicative_utils_1","require","pluralize","singular","sanitize","data","field","fieldValue","getValue","patchValue","default"],"sources":["/Users/akshayg/Personal/blog/blog/node_modules/indicative-rules/build/src/sanitizations/singular.js"],"sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst pluralize = __importStar(require(\"pluralize\"));\n/**\n * Converts a value to it's singular version. If value is not a string\n * then it will be returned as it is.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   modelName: 'singular'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   modelName: [\n *     sanitizations.singular()\n *   ]\n * }\n * ```\n */\nconst singular = {\n    sanitize(data, field) {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (typeof (fieldValue) !== 'string') {\n            return;\n        }\n        indicative_utils_1.patchValue(data, field, pluralize.singular(fieldValue));\n    },\n};\nexports.default = singular;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA,IAAIA,YAAY,GAAI,IAAI,IAAI,IAAI,CAACA,YAAY,IAAK,UAAUC,GAAG,EAAE;EAC7D,IAAIA,GAAG,IAAIA,GAAG,CAACC,UAAU,EAAE,OAAOD,GAAG;EACrC,IAAIE,MAAM,GAAG,CAAC,CAAC;EACf,IAAIF,GAAG,IAAI,IAAI,EAAE,KAAK,IAAIG,CAAC,IAAIH,GAAG,EAAE,IAAII,MAAM,CAACC,cAAc,CAACC,IAAI,CAACN,GAAG,EAAEG,CAAC,CAAC,EAAED,MAAM,CAACC,CAAC,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;EAC9FD,MAAM,CAAC,SAAS,CAAC,GAAGF,GAAG;EACvB,OAAOE,MAAM;AACjB,CAAC;AACDE,MAAM,CAACG,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD,MAAMC,SAAS,GAAGb,YAAY,CAACY,OAAO,CAAC,WAAW,CAAC,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,QAAQ,GAAG;EACbC,QAAQA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAClB,IAAIC,UAAU,GAAGP,kBAAkB,CAACQ,QAAQ,CAACH,IAAI,EAAEC,KAAK,CAAC;IACzD,IAAI,OAAQC,UAAW,KAAK,QAAQ,EAAE;MAClC;IACJ;IACAP,kBAAkB,CAACS,UAAU,CAACJ,IAAI,EAAEC,KAAK,EAAEJ,SAAS,CAACC,QAAQ,CAACI,UAAU,CAAC,CAAC;EAC9E;AACJ,CAAC;AACDT,OAAO,CAACY,OAAO,GAAGP,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}